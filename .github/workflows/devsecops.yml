name: Automatisation des tests DevSecOps

on: push

jobs:
  Dependances:
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Récupération du code
        uses: actions/checkout@v4

      - name: 🔍 Vérification du fichier requirements.txt
        run: |
          echo "Contrôle du fichier requirements.txt..."
          if [ ! -f requirements.txt ]; then
            echo "❌ Le fichier requirements.txt est manquant !"
            exit 1
          fi

          echo "✅ Fichier requirements.txt trouvé."
          echo "🔍 Vérification du format..."
          if ! grep -E '^[a-zA-Z0-9_.-]+(==[0-9a-zA-Z_.-]+)?$' requirements.txt >/dev/null 2>&1; then
            echo "⚠️ Certaines lignes de requirements.txt semblent incorrectes."
          else
            echo "✅ Le fichier requirements.txt semble bien formé."
          fi

      - name: 🛡️ Audit de sécurité des dépendances (pip-audit)
        run: |
          echo "Installation de pip-audit..."
          python3 -m pip install --upgrade pip pip-audit >/dev/null 2>&1
          echo "Analyse de sécurité des dépendances..."
          pip-audit -r requirements.txt || {
            echo "❌ Vulnérabilités détectées dans les dépendances !"
            exit 1
          }
          echo "✅ Aucune vulnérabilité critique détectée."

  Dockerfile:
    runs-on: ubuntu-latest
    needs: Dependances
    steps:
      - name: 📦 Récupération du code
        uses: actions/checkout@v4

      - name: 🧱 Vérification du Dockerfile
        run: |
          echo "Contrôle du Dockerfile..."
          if [ ! -f Dockerfile ]; then
            echo "❌ Le fichier Dockerfile est manquant !"
            exit 1
          fi

          echo "✅ Dockerfile trouvé."
          echo "🔍 Analyse rapide du contenu..."
          if ! grep -q '^FROM' Dockerfile; then
            echo "❌ Le Dockerfile ne contient pas d'instruction FROM."
            exit 1
          fi

          if ! grep -q '^CMD' Dockerfile && ! grep -q '^ENTRYPOINT' Dockerfile; then
            echo "⚠️ Aucune commande CMD ou ENTRYPOINT trouvée."
          else
            echo "✅ Dockerfile semble valide."
          fi

      - name: 🧪 Scan de sécurité Dockerfile (hadolint)
        run: |
          echo "Installation de hadolint (binaire officiel)..."
          wget -qO /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x /usr/local/bin/hadolint

          echo "Analyse du Dockerfile avec hadolint..."
          if ! hadolint --failure-threshold error Dockerfile; then
            echo "⚠️ Problèmes détectés dans le Dockerfile (voir ci-dessus)."
            # Ne fait pas échouer le pipeline sauf si erreurs critiques
          fi

          echo "✅ Analyse terminée."

  Deploy:
    runs-on: ubuntu-latest
    needs: Dockerfile
    steps:
      - name: 🚀 Deploy
        run: |
          echo "Votre application est prête à être déployée 🎉"
